----------------------------------------------------------
-- project : agda-complexity
-- file    : Filter.agda
-- content : Filter Definition
-- author  : Nicolas Osborne
----------------------------------------------------------

-- This module proposes a Filter which is a way to modelize the property
-- of BigO notation (the property of being ultimately true)
-- I follow here the idea of Gn√©neau, Chargu√©raud and Pottier 2018 in order
-- to define ùë∂-notation with a Filter
-- Though, I prefer to use the definition of a Filter using the Poset
-- rather than as a subset of the powerset of a set

open import Level renaming (suc to lsuc; zero to ‚Ñì0)
open import Relation.Binary
open import Data.Product

module Filter where

  -- *Definition*
  -- ============
  
  -- A Filter is a special subset on a Poset, namely the subset of all
  -- the elements which are greater or equal to a given element of the Poset
  -- according to the partial order relation of the said Poset
  data Filter {c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}(A : Set c)(eq : Rel A ‚Ñì‚ÇÅ)(ord : Rel A ‚Ñì‚ÇÇ)
               (P : IsPartialOrder eq ord)(a : A) :
               A ‚Üí Set (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
    filter : (x : A) ‚Üí ord a x ‚Üí Filter A eq ord P a x

  -- *Properties*
  -- ============
  
  -- A Filter is never the empty set
  -- A filter contains at least the minimum appearing in its definition
  F-nonemptiness : ‚àÄ {c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Level}(A : Set c)(eq : Rel A ‚Ñì‚ÇÅ)(ord : Rel A ‚Ñì‚ÇÇ)
                   (P : IsPartialOrder eq ord)(a : A) ‚Üí
                   ‚àÉ[ x ] Filter A eq ord P a x
  F-nonemptiness A eq ord P a = a ,
                                filter a
                                (IsPreorder.reflexive (IsPartialOrder.isPreorder P)
                                  (IsEquivalence.refl
                                  (IsPreorder.isEquivalence (IsPartialOrder.isPreorder P))))

  -- A Filter is filter base (downward directed: every pair of elements is bounded below)
  F-filter-base : ‚àÄ {c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Level}(A : Set c)(eq : Rel A ‚Ñì‚ÇÅ)(ord : Rel A ‚Ñì‚ÇÇ)
                (P : IsPartialOrder eq ord)(a x y : A) ‚Üí
                Filter A eq ord P a x ‚Üí
                Filter A eq ord P a y ‚Üí
                ‚àÉ[ z ] Filter A eq ord P a z
  F-filter-base A eq ord P a x y = Œª _ ‚Üí _,_ y

  -- A Filter is upward closed (is an upper set)
  F-upward-closed : ‚àÄ {c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Level}(A : Set c)(eq : Rel A ‚Ñì‚ÇÅ)(_‚â§_ : Rel A ‚Ñì‚ÇÇ)
                (P : IsPartialOrder eq _‚â§_)(a x y : A) ‚Üí
                Filter A eq _‚â§_ P a x ‚Üí
                x ‚â§ y ‚Üí
                Filter A eq _‚â§_ P a y
  F-upward-closed A eq _‚â§_ P a x y (filter x (a‚â§x)) x‚â§y = filter y (IsPreorder.trans (IsPartialOrder.isPreorder P) a‚â§x x‚â§y)                

 -- *Examples*
 -- ==========
 
  private
    open import Relation.Binary.PropositionalEquality
    open import Data.Nat hiding (_‚äî_)
    open import Data.Nat.Properties
    -- some exemples of instanciation of Filter
    mkNatFilter : (a : ‚Ñï) ‚Üí (x : ‚Ñï) ‚Üí a ‚â§ x ‚Üí Filter ‚Ñï _‚â°_ _‚â§_ ‚â§-isPartialOrder a x
    mkNatFilter a x a‚â§x = filter x a‚â§x
  
    ex‚ÇÅ : Filter ‚Ñï _‚â°_ _‚â§_ ‚â§-isPartialOrder 2 3
    ex‚ÇÅ = mkNatFilter 2 3 (s‚â§s (s‚â§s z‚â§n))
  
    gt3 = mkNatFilter 3
  
    ex‚ÇÇ : Filter ‚Ñï _‚â°_ _‚â§_ ‚â§-isPartialOrder 3 3
    ex‚ÇÇ = gt3 3 (s‚â§s (s‚â§s (s‚â§s z‚â§n)))

  
